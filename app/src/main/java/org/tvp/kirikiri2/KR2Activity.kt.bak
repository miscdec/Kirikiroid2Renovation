package org.tvp.kirikiri2

import android.annotation.TargetApi
import android.app.Activity
import android.app.ActivityManager
import android.content.Context
import android.content.Intent
import android.content.SharedPreferences
import android.content.pm.ActivityInfo
import android.graphics.PixelFormat
import android.net.Uri
import android.os.*
import android.os.Build.VERSION.SDK_INT
import android.os.Build.VERSION_CODES
import android.os.Build.VERSION_CODES.KITKAT
import android.provider.Settings
import android.telephony.TelephonyManager
import android.view.KeyEvent
import android.view.View
import android.view.inputmethod.EditorInfo
import android.view.inputmethod.InputConnection
import android.view.inputmethod.InputMethodManager
import android.widget.FrameLayout
import androidx.documentfile.provider.DocumentFile
import androidx.preference.PreferenceManager
import com.amaze.filemanager.filesystem.ExternalSdCardOperation.getDocumentFile
import org.cocos2dx.lib.Cocos2dxActivity
import org.cocos2dx.lib.Cocos2dxGLSurfaceView
import org.tvp.kirikiri2.util.PackageUtil
import org.tvp.kirikiri2.util.StorageUtil
import org.tvp.kirikiri2.view.DialogMessage
import org.tvp.kirikiri2.view.KR2GLSurfaceView
import java.io.File
import java.util.*


/* This is a fake invisible editor view that receives the input and defines the
 * pan&scan region
 */
internal class DummyEdit(context: Context?) : View(context), View.OnKeyListener {
    var ic: InputConnection? = null
    override fun onCheckIsTextEditor(): Boolean {
        return true
    }

    override fun onKey(v: View, keyCode: Int, event: KeyEvent): Boolean {

        // This handles the hardware keyboard input
        if (event.isPrintingKey) {
            if (event.action == KeyEvent.ACTION_DOWN) {
                ic!!.commitText(event.unicodeChar.toChar().toString(), 1)
            }
            return true
        }

//        if (event.getAction() == KeyEvent.ACTION_DOWN) {
//        	KR2Activity.nativeKeyAction(keyCode, true);
//            return true;
//        } else if (event.getAction() == KeyEvent.ACTION_UP) {
//        	KR2Activity.nativeKeyAction(keyCode, false);
//            return true;
//        }
        return false
    }

    //
    override fun onKeyPreIme(keyCode: Int, event: KeyEvent): Boolean {
        // As seen on StackOverflow: http://stackoverflow.com/questions/7634346/keyboard-hide-event
        // FIXME: Discussion at http://bugzilla.libsdl.org/show_bug.cgi?id=1639
        // FIXME: This is not a 100% effective solution to the problem of detecting if the keyboard is showing or not
        // FIXME: A more effective solution would be to change our Layout from AbsoluteLayout to Relative or Linear
        // FIXME: And determine the keyboard presence doing this: http://stackoverflow.com/questions/2150078/how-to-check-visibility-of-software-keyboard-in-android
        // FIXME: An even more effective way would be if Android provided this out of the box, but where would the fun be in that :)
        if (event.action == KeyEvent.ACTION_UP && keyCode == KeyEvent.KEYCODE_BACK) {
            if (KR2Activity.mTextEdit != null && KR2Activity.mTextEdit!!.visibility == VISIBLE) {
                KR2Activity.hideTextInput()
                //KR2Activity.nativeKeyboardFocusLost();
            }
        }
        return super.onKeyPreIme(keyCode, event)
    }

    override fun onCreateInputConnection(outAttrs: EditorInfo): InputConnection {
        ic = SDLInputConnection(this, true)
        outAttrs.imeOptions = (EditorInfo.IME_FLAG_NO_EXTRACT_UI
                or 33554432) /* API 11: EditorInfo.IME_FLAG_NO_FULLSCREEN */
        return ic as SDLInputConnection
    }

    init {
        isFocusableInTouchMode = true
        isFocusable = true
        setOnKeyListener(this)
    }
}

open class KR2Activity : Cocos2dxActivity() {
    companion object {

        var sInstance: KR2Activity? = null

        @JvmStatic
        fun GetInstance(): KR2Activity? {
            return sInstance
        }

        var memoryInfo = ActivityManager.MemoryInfo()
        private var mActivityManager: ActivityManager? = null
        var mDbgMemoryInfo = Debug.MemoryInfo()



        var mDialogMessage = DialogMessage()

        var mTextEdit: View? = null
        var msgHandler: Handler = object : Handler() {
            override fun handleMessage(msg: Message) {
                sInstance!!.handleMessage(msg)
            }
        }

        fun ShowMessageBox(title: String?, text: String?, Buttons: Array<String?>) {
            mDialogMessage.Init(title, text, Buttons)
            val post = msgHandler.post { mDialogMessage.ShowMessageBox() }
        }

        fun ShowInputBox(title: String?, prompt: String?, text: String?, Buttons: Array<String?>) {
            mDialogMessage.Init(title, prompt, Buttons)
            msgHandler.post { mDialogMessage.ShowInputBox(text) }
        }

        fun showTextInput(x: Int, y: Int, w: Int, h: Int) {
            msgHandler.post(ShowTextInputTask(x, y, w, h))
        }

        fun hideTextInput() {
            msgHandler.post {
                if (mTextEdit != null) {
                    mTextEdit!!.visibility = View.GONE
                    val imm =
                        sInstance!!.getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager
                    imm.hideSoftInputFromWindow(mTextEdit!!.windowToken, 0)
                }
            }
        }

        external fun onMessageBoxOK(nButton: Int)
        external fun onMessageBoxText(text: String)
        private external fun onNativeExit()
        external fun onNativeInit()
        external fun onBannerSizeChanged(w: Int, h: Int)
        private external fun initDump(path: String)
        private external fun nativeOnLowMemory()

        fun MessageController(what: Int, arg1: Int, arg2: Int) {
            val msg = msgHandler.obtainMessage()
            msg.what = what
            msg.arg1 = arg1
            msg.arg2 = arg2
            msgHandler.sendMessage(msg)
        }



        external fun nativeTouchesBegin(id: Int, x: Float, y: Float)
        external fun nativeTouchesEnd(id: Int, x: Float, y: Float)
        external fun nativeTouchesMove(ids: IntArray, xs: FloatArray, ys: FloatArray)
        external fun nativeTouchesCancel(ids: IntArray, xs: FloatArray, ys: FloatArray)
        @JvmStatic
        external fun nativeKeyAction(keyCode: Int, isPress: Boolean): Boolean
        @JvmStatic
        external fun nativeCharInput(keyCode: Int)
        @JvmStatic
        external fun nativeCommitText(text: String?, newCursorPosition: Int)

        external fun nativeInsertText(text: String)
        external fun nativeDeleteBackward()
        private external fun nativeGetContentText(): String?
        external fun nativeHoverMoved(x: Float, y: Float)
        external fun nativeMouseScrolled(scroll: Float)

        ////////////////////////////////////////////////////
        //jni output method
        @JvmStatic
        fun updateMemoryInfo() {
            Debug.getMemoryInfo(mDbgMemoryInfo)
        }

        @JvmStatic
        fun getAvailMemory(): Long{
            return memoryInfo.availMem
        }

        @JvmStatic
        fun getUsedMemory(): Long {
            // in kB
            return mDbgMemoryInfo.totalPss.toLong()
        }

        fun getDeviceId(): String? {
            val mgr: TelephonyManager =
                GetInstance()!!.getSystemService(Context.TELEPHONY_SERVICE) as TelephonyManager
            val DeviceID: String = mgr.getDeviceId()
            if (DeviceID != null) {
                return "DevID:$DeviceID"
            }
            val androidId: String =
                Settings.Secure.getString(GetInstance()!!.contentResolver, Settings.Secure.ANDROID_ID)
            if (null != androidId && androidId.length > 8 &&
                "9774d56d682e549c" != androidId
            ) {
                return "AndroidID:$androidId"
            } else if (null != Build.SERIAL && Build.SERIAL.length > 3) {
                return "AndroidID:" + Build.SERIAL
            }
            return ""
        }

        @JvmStatic
        fun GetVersion(): String {
            return PackageUtil.GetVersion(getContext()).toString()
        }



        fun getLocaleName(): String? {
            val defloc = Locale.getDefault()
            var lang = defloc.language
            val country = defloc.country
            if (!country.isEmpty()) {
                lang += "_"
                lang += country.lowercase(Locale.getDefault())
            }
            return lang
        }

        @JvmStatic
        fun requireLEXA(path: String?){
            return StorageUtil().requireLEXA(path)
        }

        @JvmStatic
        fun getStoragePath(context: Context?): Array<String?>{
            return StorageUtil().getStoragePath(getContext())
        }
        ////////////////////////////////////////////////////


//

//        fun isWritableNormalOrSaf(path: String?): Boolean {
//            val c: Context? = sInstance
//            val folder = File(path)
//            if (!folder.exists() || !folder.isDirectory) {
//                return false
//            }
//
//            // Find a non-existing file in this directory.
//            var i = 0
//            var file: File
//            do {
//                val fileName = "AugendiagnoseDummyFile" + ++i
//                file = File(folder, fileName)
//            } while (file.exists())
//
//            // First check regular writability
//            if (isWritable(file)) {
//                return true
//            }
//
//            // Next check SAF writability.
//            val document = getDocumentFile(file, false, c) ?: return false
//
//            // This should have created the file - otherwise something is wrong with access URL.
//            val result = document.canWrite() && file.exists()
//
//            // Ensure that the dummy file is not remaining.
//            document.delete()
//            return result
//        }


//


        @JvmStatic
        fun RenameFile(from: String?, to: String?): Boolean{
            return StorageUtil().RenameFile(from, to)
        }



        @JvmStatic
        fun DeleteFile(path: String?): Boolean{
            return StorageUtil().DeleteFile(path)
        }

//        fun getOutputStream(target: File, context: Context, s: Long): OutputStream? {
//            var result: OutputStream? = null
//            var finished = false
//            var outStream: OutputStream? = null
//            try {
//                // First try the normal way
//                if (isWritable(target)) {
//                    // standard way
//                    outStream = FileOutputStream(target)
//                } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
//                    // Storage Access Framework
//                    val targetDocument = getDocumentFile(target, false, context)
//                    outStream = context.contentResolver.openOutputStream(targetDocument!!.uri)
//                } else if (Build.VERSION.SDK_INT == Build.VERSION_CODES.KITKAT) {
//                    // Workaround for Kitkat ext SD card
//                    result = MediaStoreHack.getOutputStream(context, target.path)
//                    finished = true
//                }
//            } catch (e: Exception) {
//                Log.e(
//                    "FileUtils",
//                    "Error when copying file from " + target.absolutePath, e
//                )
//            }
//            if (!finished) {
//                result = outStream
//            }
//            return result
//        }

        @JvmStatic
        fun WriteFile(path: String?, data: ByteArray?): Boolean {
            return StorageUtil().WriteFile(path, data)
        }

        @JvmStatic
        fun CreateFolders(path: String?): Boolean{
            return StorageUtil().CreateFolders(path)
        }

        @JvmStatic
        external fun nativeGetHideSystemButton(): Boolean


        @JvmStatic
        fun exit() {
            System.exit(0)
        }

        const val ORIENT_VERTICAL = 1
        const val ORIENT_HORIZONTAL = 2
        fun setOrientation(orient: Int) {
            if (orient == ORIENT_VERTICAL) {
                sInstance!!.requestedOrientation =
                    ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED
            } else if (orient == ORIENT_HORIZONTAL) {
                sInstance!!.requestedOrientation =
                    ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE
            }
        }

        @TargetApi(VERSION_CODES.LOLLIPOP)
        fun triggerStorageAccessFramework() {
            val intent = Intent(Intent.ACTION_OPEN_DOCUMENT_TREE)
            sInstance!!.startActivityForResult(intent, 3)
        }

        init {
            System.loadLibrary("ffmpeg")
            //		System.loadLibrary("game");
        }
    }

    public override fun onCreate(savedInstanceState: Bundle?, persistentState: PersistableBundle?) {
        super.setEnableVirtualButton(false)
        sInstance = this
        Sp = PreferenceManager.getDefaultSharedPreferences(this)
        super.onCreate(savedInstanceState)
        /*
		if (Build.VERSION.SDK_INT>=Build.VERSION_CODES.LOLLIPOP) {
			for(String path : getExtSdCardPaths(this)) {
		        if (!isWritableNormalOrSaf(path)) {
		            guideDialogForLEXA(path);
		        }
			}
		}
		*/initDump(getExternalFilesDir("dump")!!.absolutePath)
    }

    public override fun onDestroy() {
        super.onDestroy()
        System.exit(0)
    }

    override fun onLowMemory() {
        nativeOnLowMemory()
    }



    private var Sp: SharedPreferences? = null

    fun handleMessage(msg: Message?) {}
    internal class ShowTextInputTask(var x: Int, var y: Int, var w: Int, var h: Int) : Runnable {
        override fun run() {
            val params = FrameLayout.LayoutParams(
                w, h + HEIGHT_PADDING
            )
            params.leftMargin = x
            params.topMargin = y
            if (mTextEdit == null) {
                mTextEdit = DummyEdit(getContext())
                sInstance!!.mFrameLayout.addView(mTextEdit, params)
            } else {
                mTextEdit!!.layoutParams = params
            }
            mTextEdit!!.visibility = View.VISIBLE
            mTextEdit!!.requestFocus()
            val imm =
                getContext().getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager
            imm.showSoftInput(mTextEdit, 0)
        }

        companion object {
            /*
         * This is used to regulate the pan&scan method to have some offset from
         * the bottom edge of the input region and the top edge of an input
         * method (soft keyboard)
         */
            const val HEIGHT_PADDING = 15
        }
    }


    fun isWritableNormalOrSaf(path: String?): Boolean {
        val c: Context = sInstance!!
        val folder = File(path)
        if (!folder.exists() || !folder.isDirectory()) {
            return false
        }

        // Find a non-existing file in this directory.
        var i = 0
        var file: File
        do {
            val fileName = "AugendiagnoseDummyFile" + ++i
            file = File(folder, fileName)
        } while (file.exists())

        // First check regular writability
        if (StorageUtil().isWritable(file)) {
            return true
        }

        // Next check SAF writability.
        val document: DocumentFile = getDocumentFile(file, false, c) ?: return false

        // This should have created the file - otherwise something is wrong with access URL.
        val result = document.canWrite() && file.exists()

        // Ensure that the dummy file is not remaining.
        document.delete()
        return result
    }



    override fun onCreateView(): Cocos2dxGLSurfaceView {
        val glSurfaceView: Cocos2dxGLSurfaceView = KR2GLSurfaceView(this)
        hideSystemUI()
        //this line is need on some device if we specify an alpha bits
        if (mGLContextAttrs[3] > 0) glSurfaceView.holder.setFormat(PixelFormat.TRANSLUCENT)
        val chooser = Cocos2dxEGLConfigChooser(mGLContextAttrs)
        glSurfaceView.setEGLConfigChooser(chooser)
        return glSurfaceView
    }

    fun hideSystemUI() {
        if (nativeGetHideSystemButton() && SDK_INT >= KITKAT) {
            doSetSystemUiVisibility()
        }
    }


    open fun get_res_sd_operate_step(): Int {
        return -1
    }

    override fun onWindowFocusChanged(hasFocus: Boolean) {
        super.onWindowFocusChanged(hasFocus)

        //SDLActivity.mHasFocus = hasFocus;
        if (hasFocus) {
            hideSystemUI()
        }
    }

    @TargetApi(VERSION_CODES.HONEYCOMB)
    fun doSetSystemUiVisibility() {
        val uiOpts = (View.SYSTEM_UI_FLAG_LAYOUT_STABLE
                or View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
                or View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
                or View.SYSTEM_UI_FLAG_FULLSCREEN
                or View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
                or View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY)
        window.decorView.systemUiVisibility = uiOpts
    }





    override fun onActivityResult(requestCode: Int, responseCode: Int, intent: Intent) {
        if (requestCode == 3) {
            val p = Sp!!.getString("URI", null)
            var oldUri: Uri? = null
            if (p != null) oldUri = Uri.parse(p)
            var treeUri: Uri? = null
            if (responseCode == Activity.RESULT_OK) {
                // Get Uri from Storage Access Framework.
                treeUri = intent.data
                // Persist URI - this is required for verification of writability.
                if (treeUri != null) Sp!!.edit().putString("URI", treeUri.toString()).apply()
            }

            // If not confirmed SAF, or if still not writable, then revert settings.
            if (responseCode != Activity.RESULT_OK) {
                /* DialogUtil.displayError(getActivity(), R.string.message_dialog_cannot_write_to_folder_saf, false,
                        currentFolder);||!FileUtil.isWritableNormalOrSaf(currentFolder)
*/
                if (treeUri != null) Sp!!.edit().putString("URI", oldUri.toString()).apply()
                return
            }

            // After confirmation, update stored value of folder.
            // Persist access permissions.
            if (SDK_INT >= KITKAT) {
                if (treeUri != null) {
                    contentResolver
                        .takePersistableUriPermission(
                            treeUri,
                            Intent.FLAG_GRANT_READ_URI_PERMISSION or Intent.FLAG_GRANT_WRITE_URI_PERMISSION
                        )
                }
            }
        }
    }
}